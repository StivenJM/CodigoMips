.data
    msgTitulo: .asciiz "*************** NUMEROS PRIMOS ***************\nEl programa lista los numeros primos desde 2 hasta un limite.\n\n"
    msgPedirNum: .asciiz "Escriba el limite: "
    esp: .asciiz ", "
    
    limite: .word 0
    
    tiempoInicial: .word 0
    msgTiempo: .asciiz "\nTiempo de ejecucion: "
.text
main:
    # Imprimir el título
    li $v0, 4
    la $a0, msgTitulo
    syscall

    # Solicitar el límite al usuario
    la $a0, msgPedirNum
    syscall
    li $v0, 5
    syscall
    sw $v0, limite # Guardar el número ingresado en "limite"

    # Iniciar el temporizador
    li $v0, 30
    syscall
    sw $a0, tiempoInicial

    # Iniciar la búsqueda de números primos desde 2 hasta el límite
    li $t0, 2
	
    lw $t7, limite
    # Bucle principal
bucle1:
    # Verificar si $t0 es primo
    jal verificarPrimo

    # Imprimir el número primo
    beqz $v1, no_imprimir_primo
    li $v0, 1
    move $a0, $t0
    syscall
    li $v0, 4
    la $a0, esp
    syscall

no_imprimir_primo:

    # Incrementar $t0 y verificar si llegamos al límite
    addi $t0, $t0, 1
    ble $t0, $t7, bucle1

    # Detener el temporizador
    li $v0, 30
    syscall
    move $t0, $a0

    # Imprimir el tiempo total
    li $v0, 4
    la $a0, msgTiempo
    syscall
	
    lw $t1, tiempoInicial
    li $v0, 1
    sub $a0, $t0, $t1
    syscall

    # Terminar el programa
    li $v0, 10
    syscall

# Función para verificar si un número en $t0 es primo
# Retorna $v1 = 1 si es primo, $v1 = 0 si no es primo
verificarPrimo:

    move $v1, $zero  # Inicializar $v1 a 0 (no es primo)
    beqz $t0, no_primo  # 0 no es primo, salta a no_primo
    beq $t0, 2, es_primo  # 2 es primo, salta a es_primo
    beq $t0, 3, es_primo  # 3 es primo, salta a es_primo

    # Comprobar si $t0 es divisible por 2
    andi $t4, $t0, 1  # $t4 = $t0 AND 1
    beqz $t4, no_primo  # Si $t4 es cero, $t0 es par, salta a no_primo

    # Comprobar si $t0 es divisible por impares desde 3 hasta su mitad
    li $t3, 3  # $t3 = Divisor inicial
    srl $t4, $t0, 1  # $t4 -> mitad

bucle2:
    bgt $t3, $t4, es_primo  # Si hemos llegado a $t0, es primo

    divu $t0, $t3  # $t0 / $t3 (division enteros positivos)
    mfhi $t5  # $t5 = Resto de la división

    beqz $t5, no_primo  # Si el resto es cero, $t0 no es primo, salta a no_primo
    
    addi $t3, $t3, 2  # Incrementar el divisor en 2 (siguiente impar)
    j bucle2

es_primo:
    li $v1, 1  # $t0 es primo, establece $v1 en 1
    jr $ra

no_primo:
    jr $ra

